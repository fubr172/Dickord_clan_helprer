import logging
import re
from venv import logger
import pytz
from datetime import timedelta, datetime
import aiohttp
from datetime import datetime
import asyncio
import discord
from discord.ext import commands, tasks
from discord.errors import HTTPException
from aiogram import Bot as TelegramBot, Dispatcher
from aiogram.types import Message
from pymongo import MongoClient
import requests
from dotenv import load_dotenv
import os

load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
STEAM_API_KEY = os.getenv('STEAM_API_KEY')
MONGO_URI = os.getenv('MONGO_URI')

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∫–∞–Ω–∞–ª–æ–≤
LOG_CHANNEL_ID = os.getenv('LOG_CHANNEL_ID')
VACATION_CHANNEL_ID = os.getenv('VACATION_CHANNEL_ID')
CHANNEL_ID = os.getenv('CHANNEL_ID')
YOUR_GUILD_ID = os.getenv('YOUR_GUILD_ID')
ALLOWED_CHANNEL_ID = os.getenv('ALLOWED_CHANNEL_ID')
CHANNEL_ID_ROLL = os.getenv('CHANNEL_ID_ROLL')
CHECKED_CHANNEL_ID = os.getenv('CHECKED_CHANNEL_ID')
DISALLOWED_GUILDS = os.getenv('DISALLOWED_GUILS')
DISCORD_CHANNEL_ID_TG = os.getenv('DISCORD_CHANNEL_ID_TG')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
ED_CHANNEL_ID = os.getenv('ED_CHANNEL_ID')
STEAM_CHANNEL_ID = os.getenv('STEAM_CHANNEL_ID')

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
AFK_CHANNEL_NAME = "AFK"
CREATE_CHANNEL_NAME = "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
VOICE_CHANNELS_CATEGORY_NAME = "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã"
NEW_MEMBER_ROLE_NAME = "–ì–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
WARNED_ROLE_NAME = "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏
VACATION_ROLE_NAME = "–û—Ç–ø—É—Å–∫"  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–ø—É—Å–∫–∞
ALLOWED_ROLES = ["üéñÔ∏è‚îÇÔ∏é –ö–æ–º–∞–Ω–¥—É—é—â–∏–π –∫–ª–∞–Ω–∞", "‚≠ê‚îÇÔ∏é–ó–∞–º.–ö–æ–º–∞–Ω–¥—É—é—â–µ–≥–æ", "üö®‚îÇÔ∏é–°—Ç.–û—Ñ–∏—Ü–µ—Ä", "üõ°Ô∏è‚îÇÔ∏é–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                 "‚úçÔ∏è‚îÇÔ∏é–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä"]
CHECKED_ROLES = ["üéñÔ∏è‚îÇÔ∏é –ö–æ–º–∞–Ω–¥—É—é—â–∏–π –∫–ª–∞–Ω–∞", "‚≠ê‚îÇÔ∏é–ó–∞–º.–ö–æ–º–∞–Ω–¥—É—é—â–µ–≥–æ", "üö®‚îÇÔ∏é–°—Ç.–û—Ñ–∏—Ü–µ—Ä",
                 '‚úçÔ∏è‚îÇÔ∏é–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', "üî∞‚îÇÔ∏é–û—Ñ–∏—Ü–µ—Ä", "ü™ñ‚îÇÔ∏é –ë–æ–µ—Ü", 'üî´‚îÇÔ∏é–ù–æ–≤–∏—á–∫–∏']
INSTRUCTOR_ROLE_NAME = ["‚úçÔ∏è‚îÇÔ∏é–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä", 'üö®‚îÇÔ∏é–°—Ç.–û—Ñ–∏—Ü–µ—Ä']
LLOWED_ROLES = ['üî´‚îÇÔ∏é–ù–æ–≤–∏—á–∫–∏', "ü™ñ‚îÇÔ∏é –ë–æ–µ—Ü", '‚öôÔ∏è‚îÇÔ∏é–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å RISE', 'ü¶Ö‚îÇÔ∏é–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –ü—è—Ç—ã–π –ú–æ—Ç–æ—Å—Ç—Ä–µ–ª–∫–æ–≤—ã–π',
                'üó°Ô∏è‚îÇÔ∏é–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å ZARUBA', 'ü§ù‚îÇÔ∏é–î—Ä—É–∑—å—è –∫–ª–∞–Ω–∞', 'üìç‚îÇÔ∏é–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤', 'üîñ‚îÇÔ∏é–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–æ—Å—Ç–∞–≤',
                'üç∫‚îÇÔ∏é–û—Å–Ω–æ–≤–Ω–æ–π –°–æ—Å—Ç–∞–≤']
ROLE_NAME = "üôÇ‚îÇÔ∏é –ì–æ—Å—Ç—å"
last_message = None
DB_NAME = "SquadJS"
TARGET_GAME_ID = os.getenv('TARGET_GAME_ID')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ intents
intents = discord.Intents.default()
intents.voice_states = True
intents.guilds = True
intents.members = True
intents.messages = True
intents.message_content = True

# Discord bot
bot = commands.Bot(command_prefix="!", intents=intents)

# Telegram bot
telegram_bot = TelegramBot(token=TELEGRAM_TOKEN)
dispatcher = Dispatcher()

client = MongoClient(MONGO_URI)
db = client[DB_NAME]
vacations = db.vacation
steam = db.steam

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Discord –∫–∞–Ω–∞–ª
class DiscordLogHandler(logging.Handler):
    """A handler class which writes logging records, to a discord channel."""
    def __init__(self, channel):
        super().__init__()
        self.channel = channel

    async def send_log(self, message):
        try:
            await self.channel.send(message)
        except HTTPException as e:
            if e.status == 429:
                retry_after = int(e.retry_after)
                await asyncio.sleep(retry_after)
                await self.channel.send(message)

    def emit(self, record):
        msg = self.format(record)
        asyncio.create_task(self.send_log(msg))

class MyView(discord.ui.View):
    def __init__(self, user: discord.Member, reason: str, end_date: str, timeout=None):
        super().__init__(timeout=timeout)
        self.user = user
        self.reason = reason
        self.end_date = end_date

    async def is_allowed_to_manage(self, interaction: discord.Interaction) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–æ–π."""
        if interaction.user == self.user:
            await interaction.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Ç–ø—É—Å–∫–æ–º.", ephemeral=True)
            return False

        allowed_roles = [discord.utils.get(interaction.guild.roles, name=role_name) for role_name in ALLOWED_ROLES]
        user_roles = set(interaction.user.roles)

        if not any(role in user_roles for role in allowed_roles):
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π –Ω–∞ –æ—Ç–ø—É—Å–∫.",
                                                    ephemeral=True)
            return False

        return True

    @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫."""
        if not await self.is_allowed_to_manage(interaction):
            return

        guild = interaction.guild
        vacation_role = discord.utils.get(guild.roles, name=VACATION_ROLE_NAME)
        if not vacation_role:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Ä–æ–ª—å –æ—Ç–ø—É—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë.")
            return

        try:
            await self.user.add_roles(vacation_role)
            confirmation_message = (
                f"–û—Ç–ø—É—Å–∫ –ø–æ –ø—Ä–∏—á–∏–Ω–µ '{self.reason}' –¥–æ {self.end_date} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. "
                f"–†–æ–ª—å '{VACATION_ROLE_NAME}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {self.user.mention}."
            )
            await interaction.channel.send(confirmation_message)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –≤ MongoDB
            db.vacation.update_one(
                {"user_id": self.user.id, "reason": self.reason, "end_date": self.end_date},
                {"$set": {"status": "approved"}}
            )

            # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
            self.confirm.disabled = True
            self.decline.disabled = True
            await interaction.response.edit_message(view=self)
        except Exception as e:
            await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ –æ—Ç–ø—É—Å–∫–∞.")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ '{VACATION_ROLE_NAME}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.user}: {e}")

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç–ø—É—Å–∫."""
        if not await self.is_allowed_to_manage(interaction):
            return

        await interaction.response.send_message("–û—Ç–ø—É—Å–∫ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –≤ MongoDB
        db.vacation.update_one(
            {"user_id": self.user.id, "reason": self.reason, "end_date": self.end_date},
            {"$set": {"status": "rejected"}}
        )

        # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
        self.confirm.disabled = True
        self.decline.disabled = True
        await interaction.response.edit_message(view=self)

@bot.tree.command(name="–æ—Ç–ø—É—Å–∫", description="–ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–ø—É—Å–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã –∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
async def vacation(interaction: discord.Interaction, reason: str, end_date: str):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–ø—É—Å–∫–∞."""
    if interaction.channel_id != VACATION_CHANNEL_ID:
        await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if not re.match(r'^\d{1,2}\.\d{1,2}\.(\d{2}|\d{4})$', end_date):
        await interaction.response.send_message("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥.",
                                                ephemeral=True)
        return

    try:
        end_date_obj = datetime.strptime(end_date, '%d.%m.%Y') if len(
            end_date.split('.')[-1]) == 4 else datetime.strptime(end_date, '%d.%m.%y')
    except ValueError:
        await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.", ephemeral=True)
        return

    roles_mentions = []
    for role_name in ALLOWED_ROLES:
        role = discord.utils.get(interaction.guild.roles, name=role_name)
        if role:
            roles_mentions.append(role.mention)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ MongoDB
    try:
        vacation_request = {
            "user_id": interaction.user.id,
            "reason": reason,
            "end_date": end_date_obj.strftime('%d.%m.%Y'),
            "requested_at": datetime.now().strftime('%d.%m.%Y %H:%M'),
            "status": "pending"
        }
        result = vacations.insert_one(vacation_request)
        logging.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {result.inserted_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫: {e}")
        await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.", ephemeral=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Ä–æ–ª–µ–π –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    vacation_request_msg = (
        f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–ø—É—Å–∫ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç: {', '.join(roles_mentions)}\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫: {interaction.user.mention}\n"
        f"–î–æ: {end_date}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
    )

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MyView –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
    view = MyView(interaction.user, reason, end_date_obj.strftime('%d.%m.%Y'))
    await interaction.channel.send(vacation_request_msg, view=view)

async def check_vacations():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–æ—Å–∫–≤—ã
        moscow_tz = pytz.timezone("Europe/Moscow")
        now = datetime.now(moscow_tz)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ (00:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
        next_run = (now + timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
        time_until_next_run = (next_run - now).total_seconds()
        logging.info(f'–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏:{time_until_next_run}')

        # –ñ–¥—ë–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        await asyncio.sleep(time_until_next_run)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–ø—É—Å–∫
        for vacation_request in vacation.find({"status": "approved"}):
            end_date_obj = datetime.strptime(vacation_request["end_date"], '%d.%m.%Y')

            if end_date_obj < now:
                guilds = bot.guilds  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–æ–≤)

                for guild in guilds:
                    member = guild.get_member(vacation_request["user_id"])
                    if member:
                        role = discord.utils.get(guild.roles, name=VACATION_ROLE_NAME)
                        if role and role in member.roles:
                            await member.remove_roles(role)
                            logging.info(f"–†–æ–ª—å '{VACATION_ROLE_NAME}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.name}.")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ MongoDB –Ω–∞ 'completed'
                try:
                    vacation.update_one({"_id": vacation_request["_id"]}, {"$set": {"status": "completed"}})
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—É—Å–∫–∞: {e}")

@bot.event
async def on_member_join(member):

    if member.guild.id in DISALLOWED_GUILDS:
        return

    logging.info(f"{member.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å "–ì–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
    role = discord.utils.get(member.guild.roles, name="–ì–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if role is None:
        logging.warning(f"–†–æ–ª—å '–ì–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
    try:
        await member.add_roles(role)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å '–ì–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' —É—á–∞—Å—Ç–Ω–∏–∫—É {member.name}")
    except discord.Forbidden:
        logging.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ '–ì–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' —É—á–∞—Å—Ç–Ω–∏–∫—É {member.name}.")
    except discord.HTTPException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ '–ì–æ—Å—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' —É—á–∞—Å—Ç–Ω–∏–∫—É {member.name}: {e}")

@bot.tree.command(name="warn", description="–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def warn(interaction: discord.Interaction, user: discord.Member, *, reason: str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
    if interaction.channel_id != ALLOWED_CHANNEL_ID:
        await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    member = interaction.guild.get_member(interaction.user.id)
    if not any(role.name in ALLOWED_ROLES for role in member.roles):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warned_role = discord.utils.get(interaction.guild.roles, name=WARNED_ROLE_NAME)
    if not warned_role:
        warned_role = await interaction.guild.create_role(name=WARNED_ROLE_NAME)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await user.add_roles(warned_role)
    await interaction.response.send_message(f">>> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω –∑–∞:\n**{reason}**")
    logging.info(f"{user.name} –±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω –∑–∞: {reason}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
    await asyncio.sleep(30 * 24 * 60 * 60)  # 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    if warned_role in user.roles:
        await user.remove_roles(warned_role)
        logging.info(f"–†–æ–ª—å '{warned_role.name}' –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π.")
        await user.send(f"–í–∞—à–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π.")


@bot.tree.command(name="unwarn", description="–°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unwarn(interaction: discord.Interaction, user: discord.Member):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
    if interaction.channel_id != ALLOWED_CHANNEL_ID:
        await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
    member = interaction.guild.get_member(interaction.user.id)
    if not any(role.name in ALLOWED_ROLES for role in member.roles):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        return

    # –°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warned_role = discord.utils.get(interaction.guild.roles, name=WARNED_ROLE_NAME)
    if warned_role in user.roles:
        await user.remove_roles(warned_role)
        await interaction.response.send_message(f">>> –° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
        logging.info(f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name} —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.")
    else:
        await interaction.response.send_message(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")


@bot.tree.command(name="—É–¥–∞–ª–∏—Ç—å", description="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å")
async def delete_role(interaction: discord.Interaction, member: discord.Member):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    if interaction.channel_id != CHECKED_CHANNEL_ID:
        await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    role = discord.utils.get(interaction.guild.roles, name=ROLE_NAME)

    if role is None:
        await interaction.response.send_message(f'–†–æ–ª—å "{ROLE_NAME}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–∞ —Ä–æ–ª—å
    if role in member.roles:
        await member.remove_roles(role)
        await interaction.response.send_message(f'–†–æ–ª—å {role.name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ —É {member.display_name}.',
                                                ephemeral=True)
    else:
        await interaction.response.send_message(f'–£ {member.display_name} –Ω–µ—Ç —Ä–æ–ª–∏ {role.name}.', ephemeral=True)

@bot.event
async def on_voice_state_update(member, before, after):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ —É –±–æ—Ç–∞
    if not member.guild.me.guild_permissions.manage_channels:
        logging.warning("–£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏.")
        return


    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ö–æ–¥–∏—Ç –≤ –∫–∞–Ω–∞–ª "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
    if after.channel and after.channel.name == CREATE_CHANNEL_NAME:
        logging.info(f"{member.name} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –∫–∞–Ω–∞–ª—É '–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª'")
        category = after.channel.category
        if category is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
            existing_channel = discord.utils.get(category.voice_channels, name=f"{member.display_name}")
            if existing_channel is None:
                new_channel = await category.create_voice_channel(name=f"{member.display_name}")
                await member.move_to(new_channel)
                logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: {new_channel.name} –¥–ª—è {member.name}")
            else:
                await member.move_to(existing_channel)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
                logging.info(f"–ü–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª: {existing_channel.name} –¥–ª—è {member.name}")

    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–∞–Ω–∞–ª—ã, –∫—Ä–æ–º–µ –∫–∞–Ω–∞–ª–∞ "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
    if (before.channel and before.channel.members == [] and
        before.channel.name not in {CREATE_CHANNEL_NAME, AFK_CHANNEL_NAME}):
        await check_and_delete_channel(before.channel)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
    elif after.channel is None and before.channel is not None:
        await check_and_delete_channel(before.channel)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
    elif after.channel is not None and before.channel is not None and before.channel != after.channel:
        await check_and_delete_channel(before.channel)

async def check_and_delete_channel(channel):
    category = discord.utils.get(channel.guild.categories, name=VOICE_CHANNELS_CATEGORY_NAME)
    if (channel.category == category and len(channel.members) == 0
        and channel.name not in {CREATE_CHANNEL_NAME, AFK_CHANNEL_NAME}):
        await delete_channel(channel)

async def delete_channel(channel):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è AFK –∏–ª–∏ –∫–∞–Ω–∞–ª–æ–º "–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª"
    if channel.name not in {AFK_CHANNEL_NAME, CREATE_CHANNEL_NAME}:
        try:
            await channel.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω –∫–∞–Ω–∞–ª: {channel.name}")
        except discord.Forbidden:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª: {channel.name}. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        except discord.HTTPException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {channel.name}. –û—à–∏–±–∫–∞: {e}")
    else:
        logging.info(f"–ö–∞–Ω–∞–ª {channel.name} –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.")


@bot.tree.command(name="—Å–æ—Å—Ç–∞–≤", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏")
async def —Å–æ—Å—Ç–∞–≤(interaction: discord.Interaction):
    global last_message

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å–∫–∞—é—â–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
    user_roles = [role.name for role in interaction.user.roles]
    if not any(role in ALLOWED_ROLES for role in user_roles):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", ephemeral=True)
        return

    guild = interaction.guild
    if not guild:
        await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä.", ephemeral=True)
        return

    # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    roles_users = {role_name: [] for role_name in CHECKED_ROLES}
    for member in guild.members:
        user_roles = [role for role in member.roles if role.name in CHECKED_ROLES]
        if user_roles:
            highest_role = max(user_roles, key=lambda r: r.position)
            roles_users[highest_role.name].append(member.display_name)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
    channel = bot.get_channel(CHANNEL_ID_ROLL)
    if not channel:
        await interaction.response.send_message("–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
        return

    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Å–∏–Ω–∏–π Embed
        embed = discord.Embed(color=0x0000ff, title="–°–æ—Å—Ç–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")  # –°–∏–Ω–∏–π —Ü–≤–µ—Ç
        embed.description = ""  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏ –≤ –æ–±—â–∏–π Embed
        for role_name, users in roles_users.items():
            if users:
                users_list = "\n> ".join(users)

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö —Å –ø—Ä–æ–±–µ–ª–æ–º –º–µ–∂–¥—É —Ä–æ–ª—è–º–∏
                embed.description += f"\n‚îÄ‚îÄ‚îÄ ‚ãÜ‚ãÖ‚òÜ‚ãÖ‚ãÜ ‚îÄ‚îÄ\n{role_name}:\n‚îÄ‚îÄ‚îÄ ‚ãÜ‚ãÖ‚òÜ‚ãÖ‚ãÜ ‚îÄ‚îÄ\n\n> {users_list}\n‚îÄ‚îÄ‚îÄ ‚ãÜ‚ãÖ‚òÜ‚ãÖ‚ãÜ ‚îÄ‚îÄ\n\n"

        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é (–≤ –ø–∞–ø–∫–µ code)
        image_path = 'Code/a639dcad-1664-4bba-b204-778bb5710a8f –∫–æ–ø–∏—è.jpg'  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–∏–π Embed –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        with open(image_path, 'rb') as image_file:
            await channel.send(embed=embed, file=discord.File(image_file, filename='image.jpg'))

    except discord.NotFound:
        await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.", ephemeral=True)
    except discord.HTTPException as e:
        await interaction.response.send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", ephemeral=True)


@bot.tree.command(name="—Ä–æ–ª—å", description="–í—ã–¥–∞—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É")
async def —Ä–æ–ª—å(interaction: discord.Interaction, member: discord.Member, role: discord.Role):
    """–í—ã–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–æ–ª—å —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É."""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
    if interaction.channel_id != CHECKED_CHANNEL_ID:
        await interaction.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    instructor_role = discord.utils.get(interaction.guild.roles, name=INSTRUCTOR_ROLE_NAME)
    if not any(role.name in INSTRUCTOR_ROLE_NAME for role in interaction.user.roles):
        await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–µ–π.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if role.name not in LLOWED_ROLES:
        await interaction.response.send_message(f"–í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ '{role.name}' –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.", ephemeral=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞
    bot_member = interaction.guild.me
    if role.position >= bot_member.top_role.position:
        await interaction.response.send_message("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —ç—Ç–æ–π —Ä–æ–ª–∏.", ephemeral=True)
        return

    try:
        await member.add_roles(role)
        await interaction.response.send_message(f'–†–æ–ª—å {role.name} –≤—ã–¥–∞–Ω–∞ {member.mention}.')
    except discord.Forbidden:
        await interaction.response.send_message("–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —ç—Ç–æ–π —Ä–æ–ª–∏.", ephemeral=True)
    except discord.HTTPException as e:
        await interaction.response.send_message("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ä–æ–ª–∏.", ephemeral=True)

@bot.event
async def on_message(message):
    logger.info(f"Checking message from Discord - Channel: {message.channel.id} (Expected: {DISCORD_CHANNEL_ID_TG})")
    if message.channel.id == DISCORD_CHANNEL_ID_TG and not message.author.bot:
        try:
            logger.info(f"Received message from Discord: {message.author.name} "
                        f"({message.author.id}): {message.content}")
            if message.content.strip():  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await telegram_bot.send_message(
                    chat_id=TELEGRAM_CHAT_ID,
                    text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Discord: {message.author.display_name}: {message.content}'
                )
                logger.info("Message sent to Telegram successfully.")
            else:
                logger.warning(f"Received empty message from Discord from {message.author.name}.")
        except Exception as e:
            logger.error(f"Error sending message to Telegram: {e}")

def is_allowed_channel():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    def predicate(interaction: discord.Interaction):
        return interaction.channel.id == STEAM_CHANNEL_ID

    return predicate

async def get_steam_nickname(steam_id: str) -> str:
    """Gets Steam nickname from Steam ID."""
    url = f"https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key={STEAM_API_KEY}&steamids={steam_id}"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as response:
                data = await response.json()
        except aiohttp.ClientError as e:
            logging.error(f"AIOHTTP error getting nickname for {steam_id}: {e}")
            return None  # Return None on error

    if data and data['response'] and data['response']['players']:
        return data['response']['players'][0]['personaname']
    return "Unknown"

def get_playtime(steam_id: str) -> int:
    """Gets playtime from Steam API."""
    url = (f"http://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?"
           f"key={STEAM_API_KEY}&steamid={steam_id}&include_appinfo=true")
    try:
        response = requests.get(url)
        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
        data = response.json()
    except requests.exceptions.RequestException as e:
        logging.exception(f"Request error getting playtime for {steam_id}: {e}")
        return None
    except Exception as e:
        logging.exception(f"Error getting playtime for {steam_id}: {e}")
        return None

    if data and data['response'] and data['response'].get('games'):
        for game in data['response']['games']:
            if game['appid'] == TARGET_GAME_ID:
                return game['playtime_forever']
    return 0  # Return 0 if not found or an error occurred

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.send(f"üö´ –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ <#{STEAM_CHANNEL_ID}>!", delete_after=10)
    else:
        await ctx.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(error)}")

@bot.tree.command(name="add_steam", description="Add Steam ID to the tracked list")
async def add_steam(interaction: discord.Interaction, steam_id: str):
    """Adds Steam ID to the database (only in allowed channel)."""
    if interaction.channel.id != STEAM_CHANNEL_ID:
        await interaction.response.send_message(
            f"üö´ This command can only be used in <#{STEAM_CHANNEL_ID}>!", ephemeral=True
        )
        return

    try:
        steam_nick = await get_steam_nickname(steam_id)
        if steam_nick is None:
             await interaction.response.send_message(f"‚ùå Could not retrieve Steam nickname for {steam_id}.  Check the Steam ID and API key.", ephemeral=True)
             return

        initial_playtime = get_playtime(steam_id)
        if initial_playtime is None:
            await interaction.response.send_message(f"‚ùå Could not retrieve initial playtime for {steam_id}. Check the Steam ID and API key.", ephemeral=True)
            return


        steam.update_one(
            {"steam_id": steam_id},  # Use steam_id as unique identifier
            {
                "$set": {
                    "steam_nick": steam_nick,
                    "last_update": datetime.now(),
                    "discord_id": interaction.user.id,  # Store Discord ID
                    "initial_playtime": initial_playtime, #  Save initial playtime
                    "total_playtime": 0,
                    "daily_playtime": 0
                },
            },
            upsert=True
        )
        await interaction.response.send_message(
            f"‚úÖ Steam ID {steam_id} ({steam_nick}) added", ephemeral=True
        )
    except Exception as e:
        logging.exception(f"Error in add_steam: {e}")
        await interaction.response.send_message(f"‚ùå Error: {str(e)}", ephemeral=True)

@bot.tree.command(name="give_stats", description="Show the stats for a Steam user")
async def give_stats(interaction: discord.Interaction, steam_id: str):
    """Shows the stats (only in allowed channel)."""
    if interaction.channel.id != STEAM_CHANNEL_ID:
        await interaction.response.send_message(
            f"üö´ This command can only be used in <#{STEAM_CHANNEL_ID}>!", ephemeral=True
        )
        return

    user_data = steam.find_one({"steam_id": steam_id})

    if not user_data:
        await interaction.response.send_message(
            f"‚ùå No data found for Steam ID {steam_id}.", ephemeral=True
        )
        return

    embed = discord.Embed(
        title=f"Statistics for {user_data['steam_nick']}",
        color=0x00ff00,
        timestamp=datetime.now()
    )

    embed.add_field(name="Steam ID", value=user_data['steam_id'], inline=False)
    embed.add_field(name="Total Playtime", value=f"{user_data['initial_playtime']} minutes", inline=True)
    embed.add_field(name="Daily Playtime", value=f"{user_data['daily_playtime']} minutes", inline=True)

    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="delete_steam", description="Remove a user from tracking")
async def delete_steam(interaction: discord.Interaction, steam_id: str):
    """Removes Steam ID (only in allowed channel)."""
    if interaction.channel.id != STEAM_CHANNEL_ID:
        await interaction.response.send_message(
            f"üö´ This command can only be used in <#{STEAM_CHANNEL_ID}>!", ephemeral=True
        )
        return

    try:
        result = steam.delete_one({"steam_id": steam_id})
        if result.deleted_count > 0:
            await interaction.response.send_message(f"‚úÖ Steam ID {steam_id} successfully removed.", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå Steam ID {steam_id} not found.", ephemeral=True)
    except Exception as e:
        logging.exception(f"Error in delete_steam: {e}")
        await interaction.response.send_message(f"‚ùå Error: {str(e)}", ephemeral=True)

@tasks.loop(hours=24)
async def update_stats():
    """Background task to update stats every 24 hours."""
    for player in steam.find():
        try:
            steam_id = player['steam_id']
            current_playtime = get_playtime(steam_id)

            if current_playtime is None:
                logging.warning(f"Could not retrieve current playtime for {steam_id}. Skipping update.")
                continue  # Skip to the next player

            initial_playtime = player.get('initial_playtime', 0) # Get initial playtime.  Default to 0 if not found.
            daily_playtime = current_playtime - initial_playtime

            steam.update_one(
                {"_id": player['_id']},
                {
                    "$set": {
                        "total_playtime": current_playtime, # Update total playtime with current playtime.
                        "daily_playtime": daily_playtime,  # Update daily playtime
                        "initial_playtime": current_playtime, #  Set new initial playtime for next day's calculation
                        "last_update": datetime.now()
                    }
                }
            )
            logging.info(f"Updated stats for {steam_id}. Total: {current_playtime}, Daily: {daily_playtime}")


        except Exception as e:
            logging.exception(f"Error updating stats for {player['steam_id']}: {e}")

#  –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –ª—É—á—à–µ —É–¥–∞–ª–∏—Ç—å, –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞ –∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å tree commands
# @bot.command()
# @is_allowed_channel_steam()
# async def get_stats(ctx, steam_id: str):
#     """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ-—É–∫–∞–∑–∞–Ω–Ω–æ–º—É Steam ID."""
#     try:
#         steam_nick = await get_steam_nickname(steam_id)
#         player_data = steam.find_one({"steam_id": steam_id})
#
#         if player_data:
#             embed = discord.Embed(
#                 title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {steam_nick}",
#                 color=0x00ff00,
#                 timestamp=datetime.now()
#             )
#
#             embed.add_field(name="Steam ID", value=player_data['steam_id'], inline=False)
#             embed.add_field(name="–û–±—â–µ–µ –≤—Ä–µ–º—è", value=f"{player_data['total_playtime']} –º–∏–Ω", inline=True)
#             embed.add_field(name="–ó–∞ —Å—É—Ç–∫–∏", value=f"{player_data['daily_playtime']} –º–∏–Ω", inline=True)
#
#             await ctx.send(embed=embed)
#         else:
#             await ctx.send(f"‚ùå –ò–≥—Ä–æ–∫ —Å Steam ID {steam_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#     except Exception as e:
#         await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@dispatcher.message()
@dispatcher.message()
async def handle_telegram_message(message: Message):
    discord_channel = bot.get_channel(DISCORD_CHANNEL_ID_TG)
    if discord_channel:
        await discord_channel.send(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram: {message.from_user.full_name}: {message.text}")

async def start_telegram_bot():
    await dispatcher.start_polling(telegram_bot)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤
async def start_telegram_bot():
    await dispatcher.start_polling(telegram_bot)

# --- Discord Events ---
@bot.event
async def on_ready():
    print(f'–ë–æ—Ç {bot.user.name} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord!')
    try:
        guild = discord.Object(id=YOUR_GUILD_ID)  # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_GUILD_ID –Ω–∞ ID –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        bot.tree.copy_global_to(guild=guild)  # –ö–æ–ø–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        synced = await bot.tree.sync(guild=guild)  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        print(f"Synced {len(synced)} command(s) to guild {guild.id}")
    except Exception as e:
        print(f"Error syncing commands: {e}")


async def main():
    """Main function to start both bots."""
    try:
        telegram_task = asyncio.create_task(start_telegram_bot())
        await bot.start(DISCORD_TOKEN)
        await telegram_task
    except Exception as e:
        logging.critical(f"Critical error starting bots: {e}")
    await check_vacations()
    await update_stats()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Terminating...")
    except Exception as e:
        logging.critical(f"Unhandled exception: {e}")
